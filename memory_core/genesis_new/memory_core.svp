//;    use POSIX;
//;    my $backtick = "`";
// ========================================================
// CGRA memory core
// ========================================================
`$backtick`define xassert(condition, message) if(condition) begin $display(message); $finish(1); end

//; my $dwidth   = parameter(Name=>'dwidth', val=> 16, doc=>'word width');
//; my $bbanks   = parameter(Name=>'bbanks', val=> 2, doc=>'Number of Banks');
//; my $ddepth   = parameter(Name=>'ddepth', val=> 512, doc=>'number of words in the memory');
//; my $wwidth   = parameter(Name=>'wwidth', val=> 16, doc=>'width of item');
//; my $numwords = int($dwidth/$wwidth);
//; my $awidth = int(ceil(log($ddepth)/log(2))) + int(ceil(log($numwords)/log(2)));
//; my $bank_addr_width = int(ceil(log($bbanks)/log(2)));
//; my $num_sram_reads = int(ceil(($numwords * $ddepth * $bbanks)/256));
//; my $width_sram_reads = int(ceil(log($num_sram_reads)));
//; my $sets_per_sram = ($numwords * $ddepth)/256;
//; my $iterator_support = parameter(Name=>'iterator_support', val=>8, doc=>'num supported iterators');
//; my $use_sram_stub = parameter(Name=>'use_sram_stub', val=>0, doc=>'1 to instantiate stub, 0 for real sram');

// ========================================================
// Module Definition
// ========================================================
module `mname`(
   clk, 
   clk_en, 
   reset, 
   flush, 

   addr_in,
   data_in, 
   data_out, 
   wen_in, 
   ren_in, 
   valid_out, 

   chain_in,
   chain_out,
   chain_wen_in,
   chain_valid_out,

   full,
   empty,
   almost_full, 
   almost_empty, 

   switch_db,

   config_addr, 
   config_data, 
   config_read, 
   config_write, 
   config_en_sram, 
//; for (my $i = 0; $i < $num_sram_reads; $i++) {
   `'read_data_sram_' . $i`,
//; }
   // Fake
   read_config_data,
   // Config
   almost_count,
   enable_chain,
   mode,
   tile_en,
   depth,
   chain_idx
);

input logic  [3:0]      almost_count;
input logic             enable_chain;
input logic  [1:0]      mode;
input logic             tile_en;
input logic  [3:0]      chain_idx;
input logic  [15:0]     depth;

// ========================================================
// Inputs and Outputs
// ========================================================
// Clock + Reset
input clk;
input clk_en;
input reset;
input flush;
// Normal Ports
input [`$wwidth - 1`:0] addr_in;
input [`$wwidth - 1`:0] data_in;
input wen_in;
input ren_in;
output logic [`$wwidth - 1`:0] data_out;
output logic valid_out;
// Chaining
input logic [`$wwidth - 1`:0] chain_in;
output [`$wwidth - 1`:0] chain_out;
output chain_valid_out;
input chain_wen_in;
// db switch
input logic switch_db;
// Status
output logic almost_full;
output logic almost_empty;
output logic full;
output logic empty;
// Config port for SRAM features (1-4)
input logic [31:0] config_addr;
input logic [31:0] config_data;
input logic config_read;
input logic config_write;
input logic [3:0] config_en_sram;

output logic [31:0] read_config_data;
//
//; for (my $i = 0; $i < $num_sram_reads; $i++) {
output logic [31:0] `'read_data_sram_' . $i`;
//; }
//
logic [`$awidth-1`:0] sram_addr [`$bbanks-1`:0];
logic [`$wwidth-1`:0] sram_mem_data_out [`$bbanks-1`:0];
logic [`$wwidth-1`:0] sram_out;
logic [`$bbanks-1`:0] sram_wen;
logic [`$bbanks-1`:0] sram_cen;

logic [`$wwidth-1`:0] mem_data_out [`$bbanks-1`:0];
logic  [`$wwidth-1`:0]  mem_data_in [`$bbanks-1`:0];
logic  [`$awidth-1`:0] mem_addr [`$bbanks-1`:0];
logic  [`$bbanks-1`:0] mem_ren;
logic  [`$bbanks-1`:0] mem_wen;

logic wen_in_int;
logic [`$wwidth - 1`:0] data_in_int;
// ========================================================
// Configuration
// ========================================================
logic             gclk_in;

logic [`$bank_addr_width-1`:0] sram_sel;
logic [`$bbanks-1`:0] mem_cen;
logic  [`$bbanks-1`:0] mem_cen_int;

// ========================================================
// No more wire declarations after this 
// ========================================================
assign gclk_in = (tile_en==1'b1) ? clk : 1'b0;
// Assign as config from sram
assign read_config_data = mem_data_out[sram_sel];
// ========================================================
// Chaining - basically changes data in/data out/valid/wen
// ========================================================
// For the FIFO/(FIFOLB) - chain fifo data/wen
assign data_in_int = (enable_chain) ? chain_in : data_in;
// For the FIFO/(FIFOLB) - chain fifo data/wen
assign wen_in_int = (enable_chain) ? chain_wen_in : wen_in;
// If the chain valid in is high, then pass through the data, otherwise send your data
assign chain_out = (enable_chain & chain_wen_in) ? chain_in : data_out;
// The valid out will be yours if the above is 0, otherwise its 1
assign chain_valid_out = (enable_chain & chain_wen_in) | valid_out;

// ========================================================
// Do all the functional modes
// ========================================================
always_comb begin

//; my $j = 0;
//; my $k = 0;
//; for (my $i = 0; $i < $num_sram_reads; $i++) {
   `'read_data_sram_' . $i` = { 16'b0, //'
		mem_data_out[`$k`]}; 
   //; $j = ($j + 1) % $width_sram_reads;
   //; if($j == 0) {
      //; $k++;  
   //; }  
//; }

  if(|config_en_sram) begin

   //; for (my $i = 0; $i < $bbanks; $i++) { 
      mem_cen_int[`$i`] = 1'b1; //' 
   //; }
   //; for (my $i = 0; $i < $bbanks; $i++) { 
      mem_wen[`$i`] =  (config_write & (
      //; for (my $j = $sets_per_sram-1; $j > 0; $j--) {	
                      config_en_sram[`$j + $i*$sets_per_sram`] |
      //; }
                      config_en_sram[`$i*$sets_per_sram`]));
   //; }

   //; for (my $i = 0; $i < $bbanks; $i++) { 
      mem_ren[`$i`] =  (config_read & (
      //; for (my $j = $sets_per_sram-1; $j > 0; $j--) {	
                      config_en_sram[`$j + $i*$sets_per_sram`] |
      //; }
                      config_en_sram[`$i*$sets_per_sram`]));
   //; }

   //; for (my $i = 0; $i < $bbanks; $i++) {
      mem_addr[`$i`] = {(config_en_sram[3] | config_en_sram[1]), config_addr[31:24]};
   //; }
   //; for (my $i = 0; $i < $bbanks; $i++) {
      mem_data_in[`$i`] = config_data[15:0];
   //; }

      data_out = mem_data_out[sram_sel];
      valid_out = 1'b0; 
      almost_full = 1'b0; 
      almost_empty = 1'b0;
      full = 1'b0;
      empty = 1'b0;

   end

   else begin
      // ========================================================
      // SRAM/LUT MODE
      // ========================================================
      mem_cen_int = sram_cen;
      mem_wen = sram_wen;
      mem_ren = {`$bbanks`{1'b1}};
      mem_addr = sram_addr;
      mem_data_in = sram_mem_data_out;
      data_out = sram_out;
      valid_out = 1'b1;
      almost_full = 1'b0;
      almost_empty = 1'b0;
      full = 1'b0;
      empty = 1'b0;
   end
end

// ========================================================
// Select a specific SRAM (from previous cycle)
// ========================================================
always_ff @(posedge gclk_in or posedge reset) begin
    if(reset) begin
        sram_sel <= 0;
    end
    else if(clk_en | (|config_en_sram)) begin
        sram_sel <= config_en_sram[3] | config_en_sram[2];
    end
end

// ========================================================
// Basically gate the memory CEN
// ========================================================
//; for (my $i = 0; $i < $bbanks; $i++) {
assign mem_cen[`$i`] = mem_cen_int[`$i`] & ( mem_wen[`$i`] | mem_ren[`$i`]) & (clk_en | (|config_en_sram));
//; }

// ========================================================
// Instantiate SRAM Controller
// ========================================================
//; my $sram_cont = generate('sram_control', 'sram_control', dwidth => $dwidth, ddepth => $ddepth, wwidth => $wwidth, bbanks => $bbanks );
`$sram_cont->instantiate()`
(
.clk(gclk_in),
.clk_en(clk_en),
.reset(reset),
.flush(flush),

.data_in(data_in),
.wen(wen_in),
.data_out(sram_out),
.ren(ren_in),
.addr_in(addr_in),

.sram_to_mem_data(sram_mem_data_out),
.sram_to_mem_cen(sram_cen),
.sram_to_mem_wen(sram_wen),
.sram_to_mem_addr(sram_addr),
.mem_to_sram_data(mem_data_out)
);

// ========================================================
// Instantiate memory banks
// ========================================================
//; my $mem = generate('mem', 'mem', dwidth => $dwidth, ddepth => $ddepth, wwidth => $wwidth, use_sram_stub => $use_sram_stub);
//; for (my $i = 0; $i < $bbanks; $i++) {
   //; my $mem_obj = clone($mem, 'mem_inst' . $i);
   `$mem_obj->instantiate()`
   (
   .data_out(mem_data_out[`$i`]),
   .data_in(mem_data_in[`$i`]),
   .clk(gclk_in),
   .cen(mem_cen[`$i`]),
   .wen(mem_wen[`$i`] & (clk_en | (|config_en_sram))),
   .addr(mem_addr[`$i`])
   );
//; }

endmodule
